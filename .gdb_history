r
call handler
call handle
c
btf
list
list readelf_.c
list readelf_
ls
list
list Handler
call Handler
c
jump 0x400d50
jump Handler
call Handler
call 0x400d63
list 0x400d63
r
c
jump Handler
call Handler
0x400d63
asm 0x400d63
disassemble
disassemble 0x400d63
disassemble 0x400d63
0x0000000000400d63 <+19>:    mov    eax,0x0
c
q
r
q
r
q
r
jump Handler
disassemble 
q
r
info reloc
explore reloc
explore reloc
info relocs
explore relocs
explore relocs
explore relocs_size
q
r
bt
explore mapping
list readelf_.c:579
list readelf_.c:1932
break readelf_.c:1932
r
explore mapping
p mapping
p mapping = p
p char * l ; l = mapping;
compile char * l ; l = mapping;
explore l
help compile
compile char * l ; l = mapping; __print_quoted_string__(l, 20, 0, "print")
compile char * l ; l = mapping; __print_quoted_string__(&l, 20, 0, "print")
compile signed char * l ; l = mapping; __print_quoted_string__(l, 20, 0, "print")
compile signed char * l ; l = mapping; __print_quoted_string__(l, 20, 0, "print")
compile const signed char * l ; l = mapping; __print_quoted_string__(l, 20, 0, "print")
compile const signed char * l ; l = mapping; __print_quoted_string__(l, 20, 0, (const signed char *) "print")
compile char * l ; l = mapping; __print_quoted_string__(l, 20, 0, (const signed char *) "print")
compile const signed char * l ; l = mapping; __print_quoted_string__(l, 20, 0, (const signed char *) "print")
compile const signed char * l = mapping; __print_quoted_string__(l, 20, 0, (const signed char *) "print")
compile const signed char * l = mapping; print_quoted_string_catraw(l, 20, 0, "print")
compile const signed char * l = mapping; print_quoted_string_catraw(l, 20, 0, "print")
compile const signed char * l = mapping; print_quoted_string_catraw(l, 20, 0, "print");
type print_quoted_string_catraw
typeof print_quoted_string_catraw
p print_quoted_string_catraw
compile const signed char * l = mapping; __print_quoted_string__(l, 20, 0, (const signed char *) "print")
compile const signed char * l = mapping; __print_quoted_string__(l, 20, 0, (const signed char *) "print");
compile const signed char * l = mapping; printf("printing mapping\n"); __print_quoted_string__(l, 20, 0, (const signed char *) "print");
compile const signed char * l = mapping; printf("printing mapping\n"); __print_quoted_string__(l, 20, 0, (const signed char *) "print"); printf("\n");
compile const signed char * l = mapping; printf("printing mapping\n"); __print_quoted_string__(l, 20, 0, "print"); printf("\n");
compile char l = mapping; printf("printing mapping\n"); __print_quoted_string__(l, 20, 0, "print"); printf("\n");
compile char* l = mapping; printf("printing mapping\n"); __print_quoted_string__(l, 20, 0, "print"); printf("\n");
compile char * l = mapping; printf("printing mapping\n"); __print_quoted_string__(l, 20, 0, "print"); printf("\n");
compile signed char * l = mapping; printf("printing mapping\n"); __print_quoted_string__(l, 20, 0, "print"); printf("\n");
compile char * l = mapping; printf("printing mapping\n"); __print_quoted_string__((const signed char *) l, 20, 0, "print"); printf("\n");
compile char * l = mapping; printf("printing mapping\n"); __print_quoted_string__((const signed char *)l, 20, 0, "print"); printf("\n");
compile char * l = mapping; printf("printing mapping\n"); __print_quoted_string__((const signed char *)l, 20, 0, "print"); printf("\n");
r
compile char * l = mapping; printf("printing mapping\n"); __print_quoted_string__((const signed char *)l, 20, 0, "print"); printf("\n");
compile printf("printing mapping\n"); __print_quoted_string__(mapping, 20, 0, "print"); printf("\n");
compile printf("printing mapping\n"); __print_quoted_string__(array, 20, 0, "print"); printf("\n");
compile printf("printing mapping\n"); print_quoted_string(array, 20, 0, "print"); printf("\n");
compile printf("printing mapping\n"); print_quoted_string_catraw(array, 20, 0, "print"); printf("\n");
compile printf("printing mapping\n"); print_quoted_string_catraw(&array, 20, 0, "print"); printf("\n");
compile printf("printing mapping\n"); print_quoted_string(&array, 20, 0, "print"); printf("\n");
compile printf("printing mapping\n"); print_quoted_string("TEST", strlen("TEST"), 0, "print"); printf("\n");
compile printf("printing mapping\n"); print_quoted_string_catraw("TEST", strlen("TEST"), 0, "print"); printf("\n");
compile printf("printing mapping\n"); print_quoted_string_catraw("TEST", strlen("TEST"), 0, "print"); printf("\n");
q
r
q
r
bt
btf
q
r
btf
q
r
bt
q
r
btf
q
r
btf
btf
r
btf
q
r
btf
q
r
btf
btf
r
q
r
qr
q
r
compile int k = (2 + 4) ;  fn(int *x) { x = 42; }; fn(k);
compile int k = (2 + 4) ;  fn(int *x) { x = 42; }; fn(k); printf ("%d\n", k)
break main'
break main
r
compile int k = (2 + 4) ;  fn(int *x) { x = 42; }; fn(k); printf ("%d\n", k)
compile int k = (2 + 4) ; void fn(int *x) { x = 42; }; fn(k); printf ("%d\n", k)
compile int k = (2 + 4) ; void fn(int *x) { *x = 42; }; fn(k); printf ("%d\n", k)
compile int k = (2 + 4) ; void fn(int *x) { x = 42; }; fn(k); printf ("%d\n", k)
compile int k = (2 + 4) ; void fn(int *x) { x = 42; }; fn(k); printf ("%d\n", k)
compile int k = (2 + 4) ; void fn(int *x) { x = 42; }; fn(k); printf ("%d\n", k)
q
break main
q
break main
r
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } mapping = malloc(span); read_fast_verify("TEST", 4, mapping, 4); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } mapping = malloc(4); read_fast_verify("TEST", 4, mapping, 4); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } char * mapping = malloc(4); read_fast_verify("TEST", 4, mapping, 4); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } char * mapping = malloc(4); read_fast_verify("TEST", 4, mapping, 4); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } read_fast_verify("TEST", 4, mapping, 4); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { dest = malloc(requested_len); memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } read_fast_verify("TEST", 4, mapping, 4); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { dest = malloc(requested_len); memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, mapping, 4); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { dest = malloc(requested_len); memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, mapping, 5); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { dest = malloc(requested_len); memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, &mapping, 5); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char *dest, int requested_len) { if (len_of_source < requested_len) { dest = malloc(requested_len); memcpy(dest, src, len_of_source); } else memcpy(dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, *mapping, 5); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char **dest, int requested_len) { if (len_of_source < requested_len) { *dest = malloc(requested_len); memcpy(*dest, src, len_of_source); } else memcpy(*dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, &mapping, 5); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char **dest, int requested_len) { if (len_of_source < requested_len) { *dest = malloc(requested_len); memcpy(*dest, src, len_of_source); } else memcpy(*dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, mapping, 5); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char (*)*dest, int requested_len) { if (len_of_source < requested_len) { *dest = malloc(requested_len); memcpy(*dest, src, len_of_source); } else memcpy(*dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, mapping, 5); printf("mapping = %s\n", mapping);
q
break main
r
compile int read_fast_verify(const char *src, int len_of_source, char (*)*dest, int requested_len) { if (len_of_source < requested_len) { *dest = malloc(requested_len); memcpy(*dest, src, len_of_source); } else memcpy(*dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, mapping, 5); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char (*)*dest, int requested_len) { if (len_of_source < requested_len) { *dest = malloc(requested_len); memcpy(*dest, src, len_of_source); } else memcpy(*dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, mapping, 5); printf("mapping = %s\n", mapping);
compile int read_fast_verify(const char *src, int len_of_source, char (*)*dest, int requested_len) { if (len_of_source < requested_len) { *dest = malloc(requested_len); memcpy(*dest, src, len_of_source); } else memcpy(*dest, src, requested_len); return requested_len; } char * mapping; read_fast_verify("TEST", 4, mapping, 5); printf("mapping = %s\n", mapping);
s
s
help s
frame 
frame info
frame
help frame
info frame'
info frame
select frame 0
frame 0
frame 1
frame 2
frame 2
frame 3
frame 4
frame 5
frame 6
frame 999999999
frame 2
frame 2
help
help status
info address
info address main
help
help status
info all-registers 
step 1
help
help status
help status
info line
info line
info line
info line
info line
info line
info line 0
info line 0
info line 1
help info line
line
info line
jump 0x400686
jmp 0x400686
jump 0x400686
help jump
jump *0x400686
jump *0x400686 step
jump *0x400686
jump *0x400686
jump *0x400686
jump *0x400686
jump *0x400686
jump *0x400686
info stack
info sharedlibrary 
info sharedlibrary
info source
info sources
info source
r
info sharedlibrary
info source
info sources
info sharedlibrary
info line
bt
jump _start
jump main
jump symbol
jump symlink
jump symlinkat
jump symlink
info address symlink
jump secure_getenv
jump getenv
jump current
jump currentaux 
info handle 
handle
handle
q
r
r
r
q
